// Automatically generated by MockGen. DO NOT EDIT!
// Source: datasource_mocks.go

package datasource

import (
	gomock "github.com/golang/mock/gomock"
)

// MockSingleValue is a mock of SingleValue interface
type MockSingleValue struct {
	ctrl     *gomock.Controller
	recorder *MockSingleValueMockRecorder
}

// MockSingleValueMockRecorder is the mock recorder for MockSingleValue
type MockSingleValueMockRecorder struct {
	mock *MockSingleValue
}

// NewMockSingleValue creates a new mock instance
func NewMockSingleValue(ctrl *gomock.Controller) *MockSingleValue {
	mock := &MockSingleValue{ctrl: ctrl}
	mock.recorder = &MockSingleValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockSingleValue) EXPECT() *MockSingleValueMockRecorder {
	return _m.recorder
}

// MockVendor is a mock of Vendor interface
type MockVendor struct {
	ctrl     *gomock.Controller
	recorder *MockVendorMockRecorder
}

// MockVendorMockRecorder is the mock recorder for MockVendor
type MockVendorMockRecorder struct {
	mock *MockVendor
}

// NewMockVendor creates a new mock instance
func NewMockVendor(ctrl *gomock.Controller) *MockVendor {
	mock := &MockVendor{ctrl: ctrl}
	mock.recorder = &MockVendorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockVendor) EXPECT() *MockVendorMockRecorder {
	return _m.recorder
}

// Accept mocks base method
func (_m *MockVendor) Accept(source *DataSourceDescriptor) bool {
	ret := _m.ctrl.Call(_m, "Accept", source)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Accept indicates an expected call of Accept
func (_mr *MockVendorMockRecorder) Accept(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Accept", arg0)
}

// CreateDataSource mocks base method
func (_m *MockVendor) CreateDataSource(source *DataSourceDescriptor) (DataSource, error) {
	ret := _m.ctrl.Call(_m, "CreateDataSource", source)
	ret0, _ := ret[0].(DataSource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataSource indicates an expected call of CreateDataSource
func (_mr *MockVendorMockRecorder) CreateDataSource(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateDataSource", arg0)
}

// MockDataSource is a mock of DataSource interface
type MockDataSource struct {
	ctrl     *gomock.Controller
	recorder *MockDataSourceMockRecorder
}

// MockDataSourceMockRecorder is the mock recorder for MockDataSource
type MockDataSourceMockRecorder struct {
	mock *MockDataSource
}

// NewMockDataSource creates a new mock instance
func NewMockDataSource(ctrl *gomock.Controller) *MockDataSource {
	mock := &MockDataSource{ctrl: ctrl}
	mock.recorder = &MockDataSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockDataSource) EXPECT() *MockDataSourceMockRecorder {
	return _m.recorder
}

// Open mocks base method
func (_m *MockDataSource) Open() error {
	ret := _m.ctrl.Call(_m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open
func (_mr *MockDataSourceMockRecorder) Open() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Open")
}

// Close mocks base method
func (_m *MockDataSource) Close() {
	_m.ctrl.Call(_m, "Close")
}

// Close indicates an expected call of Close
func (_mr *MockDataSourceMockRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

// ListEntryPoints mocks base method
func (_m *MockDataSource) ListEntryPoints(filter string, entrypoints chan<- DataBatch, minTreeLevel uint, maxTreeLevel uint) (ActionStatus, error) {
	ret := _m.ctrl.Call(_m, "ListEntryPoints", filter, entrypoints, minTreeLevel, maxTreeLevel)
	ret0, _ := ret[0].(ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEntryPoints indicates an expected call of ListEntryPoints
func (_mr *MockDataSourceMockRecorder) ListEntryPoints(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListEntryPoints", arg0, arg1, arg2, arg3)
}

// GetEntryPointInfos mocks base method
func (_m *MockDataSource) GetEntryPointInfos(entryPointValue EntryPoint) (EntryPointInfos, error) {
	ret := _m.ctrl.Call(_m, "GetEntryPointInfos", entryPointValue)
	ret0, _ := ret[0].(EntryPointInfos)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntryPointInfos indicates an expected call of GetEntryPointInfos
func (_mr *MockDataSourceMockRecorder) GetEntryPointInfos(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetEntryPointInfos", arg0)
}

// GetContent mocks base method
func (_m *MockDataSource) GetContent(entryPointValue EntryPoint, filter string, content chan<- DataBatch) (ActionStatus, error) {
	ret := _m.ctrl.Call(_m, "GetContent", entryPointValue, filter, content)
	ret0, _ := ret[0].(ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContent indicates an expected call of GetContent
func (_mr *MockDataSourceMockRecorder) GetContent(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetContent", arg0, arg1, arg2)
}

// DeleteEntrypoint mocks base method
func (_m *MockDataSource) DeleteEntrypoint(entryPointValue EntryPoint) error {
	ret := _m.ctrl.Call(_m, "DeleteEntrypoint", entryPointValue)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntrypoint indicates an expected call of DeleteEntrypoint
func (_mr *MockDataSourceMockRecorder) DeleteEntrypoint(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteEntrypoint", arg0)
}

// DeleteEntrypointChildren mocks base method
func (_m *MockDataSource) DeleteEntrypointChildren(entryPointValue EntryPoint, errorChannel chan<- error) (ActionStatus, error) {
	ret := _m.ctrl.Call(_m, "DeleteEntrypointChildren", entryPointValue, errorChannel)
	ret0, _ := ret[0].(ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteEntrypointChildren indicates an expected call of DeleteEntrypointChildren
func (_mr *MockDataSourceMockRecorder) DeleteEntrypointChildren(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteEntrypointChildren", arg0, arg1)
}

// Consume mocks base method
func (_m *MockDataSource) Consume(entryPointValue EntryPoint, values chan<- DataBatch, filter Filter, fromBeginning bool) (ActionStatus, error) {
	ret := _m.ctrl.Call(_m, "Consume", entryPointValue, values, filter, fromBeginning)
	ret0, _ := ret[0].(ActionStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consume indicates an expected call of Consume
func (_mr *MockDataSourceMockRecorder) Consume(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Consume", arg0, arg1, arg2, arg3)
}

// GetInfos mocks base method
func (_m *MockDataSource) GetInfos() (interface{}, error) {
	ret := _m.ctrl.Call(_m, "GetInfos")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfos indicates an expected call of GetInfos
func (_mr *MockDataSourceMockRecorder) GetInfos() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInfos")
}

// GetStatus mocks base method
func (_m *MockDataSource) GetStatus() (interface{}, error) {
	ret := _m.ctrl.Call(_m, "GetStatus")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus
func (_mr *MockDataSourceMockRecorder) GetStatus() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetStatus")
}
